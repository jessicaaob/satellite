PACKAGES USED
----------------------------------------------------------------------------------------------------------------
1 - GLOB 
---------------
The glob module in Python provides a convenient way to search for files that match a specified 
pattern within a directory (or directories) using Unix shell-style wildcards. 
Here's an overview and common uses for the glob package:

- File Matching: The primary function of the glob module is to search for files that match a 
specified pattern. The patterns can include wildcards such as * (matches zero or more characters) 
and ? (matches any single character).

- Directory Navigation: The glob module can be used to navigate through directories and 
subdirectories, searching for files that match a given pattern. This is particularly useful when 
you need to search for files recursively within a directory tree.

- Pattern Matching: The patterns used with glob can be customized to match specific file names or 
extensions. This flexibility allows you to search for files with specific naming conventions or 
file types.

- Batch Processing: glob is commonly used in batch processing tasks where you need to operate on 
multiple files that match a certain criteria. For example, you might use glob to locate all CSV f
iles in a directory and then perform data analysis on each of them.

- Filesystem Operations: The glob module can complement other filesystem operations in Python, 
such as file I/O, by providing a way to locate files before reading or writing to them.

- Scripting and Automation: glob is often used in scripting and automation tasks where you need 
to programmatically locate and process files based on specific criteria without manual intervention.

Overall, the glob package is a versatile tool for searching and matching files in Python, commonly u
sed in various applications ranging from data processing and analysis to file management and automation.

?? Follow up question: File I/O

File I/O (Input/Output) refers to the process of reading from and writing to files on a computer's filesystem. 
In Python, file I/O operations are facilitated by built-in functions and methods provided by the open() function 
and file objects.

Here's an overview of file I/O in Python:

- Opening Files: The open() function is used to open files in Python. It takes two arguments: the file path
 (relative or absolute) and the mode in which the file should be opened. The mode can be 'r' for reading, 
 'w' for writing (creates a new file or truncates an existing file), 'a' for appending (creates a new file or 
 appends to an existing file), or a combination of these modes (e.g., 'r+', 'w+', 'a+').

- Reading from Files: After opening a file for reading ('r' mode), you can use various methods like read(), 
readline(), or readlines() to read the contents of the file.

    read(): Reads the entire contents of the file as a single string.
    readline(): Reads a single line from the file.
    readlines(): Reads all lines from the file and returns them as a list.

- Writing to Files: After opening a file for writing ('w' mode), you can use the write() method to write data 
to the file. The write() method takes a string argument and writes it to the file.

- Appending to Files: After opening a file for appending ('a' mode), you can use the write() method to add data 
to the end of the file.

- Closing Files: After performing file I/O operations, it's important to close the file using the close() method to 
release system resources associated with the file. Alternatively, you can use the with statement to automatically 
close the file when the block of code finishes executing.

Here's a simple example of reading from a file and printing its contents:

    # Open file for reading
    with open('example.txt', 'r') as f:
        # Read contents of the file
        contents = f.read()
        # Print contents
        print(contents)

And here's an example of writing to a file:

    # Open file for writing
    with open('example.txt', 'w') as f:
        # Write data to the file
        f.write('Hello, World!')

File I/O is fundamental for many applications, including data processing, file management, configuration 
management, and more.

----------------------------------------------------------------------------------------------------------------
2 - RASTERIO
-----------------

Rasterio is a Python package used for reading and writing geospatial raster data. It provides an interface to 
various raster formats and includes functions for manipulating and analyzing raster datasets. Some of the main 
features and uses of Rasterio include:

- Reading and Writing Raster Data: Rasterio allows you to read raster datasets from various file formats such as 
GeoTIFF, JPEG, PNG, and more. It also supports writing raster data to these formats.

- Geospatial Metadata Handling: Rasterio provides tools for accessing and manipulating geospatial metadata 
associated with raster datasets. This includes information about coordinate reference systems (CRS), 
geotransform parameters, and spatial extents.

- Data Manipulation: Rasterio offers functionalities for performing various data manipulation tasks on raster 
datasets, such as cropping, resizing, reprojecting, and resampling.

- Visualization: Rasterio integrates well with other Python libraries such as Matplotlib and NumPy, allowing you 
to visualize raster data and perform exploratory data analysis.

- Interoperability: Rasterio is designed to work seamlessly with other geospatial Python libraries, such as GDAL, 
Fiona, and Shapely, enabling you to incorporate raster data processing into larger geospatial workflows.

- Remote Sensing Applications: Rasterio is commonly used in remote sensing applications for processing and 
analyzing satellite imagery, aerial photographs, and other raster data sources.

Overall, Rasterio is a powerful and versatile Python package for working with raster data in geospatial applications, 
providing essential tools for reading, writing, and manipulating raster datasets.

?? Follow up question: Raster datasets

A raster dataset is a type of digital data structure used to represent and store spatial information in a grid-like 
format, where each cell or pixel in the grid contains a value representing a specific attribute or phenomenon. 
Raster datasets are commonly used in geographic information systems (GIS), remote sensing, and various other fields 
that deal with spatial data analysis.

Here are some key characteristics and components of a raster dataset:

- Grid Structure: A raster dataset consists of a regular grid of cells or pixels arranged in rows and columns. 
Each cell covers a specific geographic area and is assigned a unique location defined by its row and column indices.

- Cell Values: Each cell in the raster grid contains a value that represents a particular attribute or variable of 
interest. These values can be numeric (e.g., elevation, temperature, population density) or categorical 
(e.g., land cover types, land use categories).

- Spatial Resolution: The spatial resolution of a raster dataset refers to the size of each cell or pixel in the grid, 
typically measured in units such as meters or degrees. Higher spatial resolution datasets have smaller cell sizes, 
providing more detailed information but requiring greater storage and processing resources.

- Coordinate Reference System (CRS): Raster datasets are georeferenced, meaning that they are associated with a 
specific coordinate reference system (CRS) that defines the spatial coordinates of the grid cells. This allows for 
accurate spatial positioning and alignment of raster data with other geospatial datasets.

- Metadata: Raster datasets often include metadata that provide information about the dataset's properties, such as 
its spatial extent, spatial resolution, coordinate reference system, data source, and any processing or acquisition 
methods used.

- File Formats: Raster datasets can be stored in various file formats, including GeoTIFF, JPEG, PNG, and many others. 
Each file format has its own characteristics, compression methods, and metadata storage mechanisms.

Raster datasets are widely used in GIS and spatial analysis for tasks such as terrain modeling, land cover 
classification, environmental monitoring, natural resource management, urban planning, and more. Their grid-based 
structure and ability to represent continuous or categorical spatial phenomena make them a versatile and essential 
component of geospatial data analysis workflows.